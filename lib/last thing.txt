import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:sapfd/model/control_view_model.dart';
import 'package:sapfd/util/color.dart';
import 'package:sapfd/view/notification_view.dart';

// ignore: must_be_immutable
class ControlView extends StatelessWidget {
  const ControlView({
    Key? key,
    required this.titre,
  }) : super(key: key);

  final String titre;

  @override
  Widget build(BuildContext context) {
    List<String> title = [
      'Home',
      'Map',
      'Profile',
    ];
    return FutureBuilder<String?>(
      future: _getUserRole(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Scaffold(
            body: Center(
              child: CircularProgressIndicator(),
            ),
          );
        }

        if (snapshot.hasError || snapshot.data == null) {
          return Scaffold(
            body: Center(
              child: Text('Error fetching user role'),
            ),
          );
        }

        return _buildControlView(snapshot.data!);
      },
    );
  }

  Future<String?> _getUserRole() async {
    User? user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      DocumentSnapshot userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .get();
      return userDoc['role'];
    }
    return null;
  }

  Widget _buildControlView(String userRole) {
    return GetBuilder<ControlViewModel>(
      init: ControlViewModel(),
      builder: (controller) => Scaffold(
        appBar: _appBar(
            titre[controller.navigatorValue], Magnifier.kDefaultMagnifierSize),
        bottomNavigationBar: _bottomNavigationBar(controller, userRole),
        body: controller.currentScreen,
      ),
    );
  }

  Widget _bottomNavigationBar(ControlViewModel controller, String userRole) {
    return userRole == 'teacher'
        ? _teacherBottomNavigationBar(controller)
        : _studentBottomNavigationBar(controller);
  }

  Widget _teacherBottomNavigationBar(ControlViewModel controller) {
    return BottomNavigationBar(
      currentIndex: controller.navigatorValue,
      onTap: (value) {
        controller.changeSelectedValue(value, 'teacher');
      },
      selectedItemColor: AppColors.blue,
      items: const [
        BottomNavigationBarItem(icon: Icon(Icons.home), label: ''),
        BottomNavigationBarItem(
          icon: Icon(Icons.person_2_sharp),
          label: '',
        ),
      ],
    );
  }

  Widget _studentBottomNavigationBar(ControlViewModel controller) {
    return BottomNavigationBar(
      currentIndex: controller.navigatorValue,
      onTap: (value) {
        controller.changeSelectedValue(value, 'student');
      },
      selectedItemColor: AppColors.blue,
      items: const [
        BottomNavigationBarItem(icon: Icon(Icons.home), label: ''),
        BottomNavigationBarItem(icon: Icon(Icons.map), label: ''),
        BottomNavigationBarItem(
          icon: Icon(Icons.person_2_sharp),
          label: '',
        ),
      ],
    );
  }

  _appBar(String title, Size taille) {
    return AppBar(
      automaticallyImplyLeading: false,
      toolbarHeight: taille.height * 0.10,
      centerTitle: false,
      actions: [
        FloatingActionButton(
          heroTag: null,
          elevation: 0,
          backgroundColor: AppColors.blue,
          child: const Icon(
            Icons.notification_important,
            color: Colors.white,
          ),
          onPressed: () {
            Get.to(const Notification_view());
          },
        ),
      ],
      backgroundColor: AppColors.blue,
      title: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontSize: 30,
              color: Colors.white,
              fontWeight: FontWeight.normal,
            ),
          ),
        ],
      ),
    );
  }
}
